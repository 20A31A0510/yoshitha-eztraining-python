{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMpeRmNuWj9FX4otkVCndns"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"woy2RobduzSJ","executionInfo":{"status":"ok","timestamp":1677298095464,"user_tz":-330,"elapsed":6372,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"509bd554-aaf9-494d-dba4-ef5dcf77ed8d"},"outputs":[{"output_type":"stream","name":"stdout","text":["enter number:13\n","It is happy number\n"]}],"source":["def happy(n):\n","  s=r=0\n","  while(n>=0):\n","    for i in range(0,len(str(n))+1):\n","      r=n%10\n","      s=s+r**2\n","      s=n//10\n","    return s\n","n=int(input(\"enter number:\"))\n","res=n\n","while(res!=1 and res!=4):\n","  res=happy(res)\n","if(res==1):\n","  print(\"It is happy number\")\n","else:\n","  print(\"It is not happy number\")    \n"]},{"cell_type":"code","source":["#protected encapsulation\n","class encap:\n","  _a=10\n","  c=20\n","  def encapfunction(self):\n","    _b=200\n","    print(\"Encap function accessing protected\")\n","    print(self._a+10)\n","obj=encap()\n","print(obj._a)\n","obj.encapfunction()\n","print(obj.c)    "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sG31XUXlyNkz","executionInfo":{"status":"ok","timestamp":1677298705914,"user_tz":-330,"elapsed":523,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"0f6cef83-13b6-46fe-b73a-640e4178b4fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","Encap function accessing protected\n","20\n","20\n"]}]},{"cell_type":"code","source":["#private encapsulaion\n","class encap:\n","  __a=10\n","  print(__a)\n","  def encapfunction(self):\n","    print(self.__a)\n","obj=encap()\n","obj.encapfunction()\n","print(obj.__a)      #will throw an error bcz a is private cant be accessed "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"YqTC_g1GyzGq","executionInfo":{"status":"error","timestamp":1677299054622,"user_tz":-330,"elapsed":614,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"0d717f33-66db-492f-d397-d66e925f2cc7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","10\n"]},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-0c69f77c1bff>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mencap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencapfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__a\u001b[0m\u001b[0;34m)\u001b[0m      \u001b[0;31m#will throw an error bcz a is private cant be accessed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'encap' object has no attribute '__a'"]}]},{"cell_type":"code","source":["#method overloading\n","class moverload:\n","  def display(self,a=None,b=None):\n","    print(a,b)\n","obj=moverload()\n","print(\"without arguments\")\n","obj.display()\n","print(\"with all arguments\")\n","obj.display(20,30)\n","print(\"with one argument\")\n","obj.display(20)    "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vNgXOzNz3EJ-","executionInfo":{"status":"ok","timestamp":1677300052023,"user_tz":-330,"elapsed":20506,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"d168909c-0233-4ba4-b58d-272eaf299736"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["without arguments\n","None None\n","with all arguments\n","20 30\n","with one argument\n","20 None\n"]}]},{"cell_type":"code","source":["#polymorphism\n","class vijayawada():\n","  def placename(self):\n","    print(\"vijayawada placename is KLU\")\n","  def student(self):\n","    print(\"yes-vijayawada\")\n","  def which_year(self):\n","    print(\"3rd year\")\n","class hyd():\n","  def placename(self):\n","    print(\"hyd placename is KLU-hyd\")\n","  def student(self):\n","    print(\"yes-hyd\")\n","  def which_year(self):\n","    print(\"3rd year-hyd\")\n","obj_vij=vijayawada()\n","obj_hyd=hyd()\n","for details in (obj_vij,obj_hyd):\n","  details.placename()\n","  details.student()\n","  details.which_year              "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BZIcWGaA7OTj","executionInfo":{"status":"ok","timestamp":1677301307720,"user_tz":-330,"elapsed":422,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"4c509694-f4d6-426b-b43e-f46026e2306d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["vijayawada placename is KLU\n","yes-vijayawada\n","hyd placename is KLU-hyd\n","yes-hyd\n"]}]},{"cell_type":"code","source":["#singly linked list\n","#creating and displaying linked list\n","class Node:\n","  def __init__(self,data):\n","    self.data=data\n","    self.next=None\n","class singlelinkedlist:\n","  def __init__(self):\n","    self.head=None\n","  def display(self):\n","    if self.head is None:\n","      print(\"linked list is empty\")\n","    else:\n","      temp=self.head\n","      while temp:\n","        print(temp.data,\"->\",end=\" \")\n","        temp=temp.next\n","obj=singlelinkedlist()\n","n=Node(10)\n","obj.head=n\n","n1=Node(20)\n","obj.head.next=n1\n","n2=Node(30)\n","n1.next=n2\n","obj.display()              "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nSmG6aj-gzb_","executionInfo":{"status":"ok","timestamp":1677311979889,"user_tz":-330,"elapsed":365,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"92fc6b31-b786-4014-dbb4-fdc88b56cb2d"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["10 -> 20 -> 30 -> "]}]},{"cell_type":"code","source":["class Node:\n","  def __init__(self,data):\n","    self.data=data\n","    self.next=None\n","class singlelinkedlist:\n","  def __init__(self):\n","    self.head=None    \n","  def display(self):\n","    if self.head is None:\n","      print(\"linked list is empty\")\n","    else:\n","      temp=self.head  \n","      while temp:\n","         print(temp.data,\"->\",end=\" \")  \n","         temp=temp.next\n","obj=singlelinkedlist()\n","n=Node('W')\n","obj.head=n\n","n1=Node('I')\n","obj.head.next=n1\n","n2=Node('N')\n","n1.next=n2\n","n3=Node('N')\n","n2.next=n3\n","n4=Node('E')\n","n3.next=n4\n","n5=Node('R')\n","n4.next=n5        \n","obj.display() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ErvLyX9Vmwv-","executionInfo":{"status":"ok","timestamp":1677313485768,"user_tz":-330,"elapsed":9,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"8bbc5f45-7871-445f-b265-2d3f76ff5539"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["W -> I -> N -> N -> E -> R -> "]}]},{"cell_type":"code","source":["#inserting node at beginning of single linked list\n","class Node:\n","  def __init__(self,data):\n","    self.data=data\n","    self.next=None\n","class singlelinkedlist:\n","  def __init__(self):\n","    self.head=None\n","  def insert_beginning(self,data):\n","    self.data=data\n","    nb=Node(data)\n","    nb.next=self.head\n","    self.head=nb\n","  def display(self):\n","    if self.head is None:\n","      print(\"linked list is empty\")\n","    else:\n","      temp=self.head\n","      while temp:\n","        print(temp.data,\"->\",end=\" \")\n","        temp=temp.next\n","obj=singlelinkedlist()\n","n=Node(40)\n","obj.head=n\n","n1=Node(30)\n","obj.head.next=n1\n","n2=Node(20)\n","n1.next=n2\n","n3=Node(10)\n","n2.next=n3\n","obj.display()\n","print(\"\\nAfter insertion at beginning\")\n","obj.insert_beginning(50)\n","obj.display() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9JJGp2NSvwiE","executionInfo":{"status":"ok","timestamp":1677315584136,"user_tz":-330,"elapsed":946,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"ef1f5d19-d60d-4b43-b097-f60c8957a61d"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["40 -> 30 -> 20 -> 10 -> \n","After insertion at beginning\n","50 -> 40 -> 30 -> 20 -> 10 -> "]}]},{"cell_type":"code","source":["#inserting node at end of linked list\n","class Node:\n","  def __init__(self,data):\n","    self.data=data\n","    self.next=None\n","class singlelinkedlist:\n","  def __init__(self):\n","    self.head=None\n","  def insert_end(self,data):\n","    self.data=data\n","    ne=Node(data)\n","    temp=self.head\n","    while temp.next:\n","      temp=temp.next\n","    temp.next=ne  \n","  def display(self):\n","    if self.head is None:\n","      print(\"linked list is empty\")\n","    else:\n","      temp=self.head\n","      while temp:\n","        print(temp.data,\"->\",end=\" \")\n","        temp=temp.next\n","obj=singlelinkedlist()\n","n=Node(40)\n","obj.head=n\n","n1=Node(30)\n","obj.head.next=n1\n","n2=Node(20)\n","n1.next=n2\n","n3=Node(10)\n","n2.next=n3\n","obj.display()\n","print(\"\\nAfter insertion at end\")\n","obj.insert_end(50)\n","obj.display() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dPTSFVk49OiL","executionInfo":{"status":"ok","timestamp":1677318337589,"user_tz":-330,"elapsed":1357,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"a98f547c-186a-42cf-fbdf-c31e19ec1919"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["40 -> 30 -> 20 -> 10 -> \n","After insertion at end\n","40 -> 30 -> 20 -> 10 -> 50 -> "]}]},{"cell_type":"code","source":["#inserting node at particular position\n","class Node:\n","  def __init__(self,data):\n","    self.data=data\n","    self.next=None\n","class singlelinkedlist:\n","  def __init__(self):\n","    self.head=None\n","  def insert_position(self,pos,data):\n","    np=Node(data)\n","    temp=self.head\n","    for i in range(pos-1):\n","      temp=temp.next\n","    np.next=temp.next\n","    temp.next=np\n","  def display(self):\n","    if self.head is None:\n","      print(\"linked list is empty\")\n","    else:\n","      temp=self.head\n","      while temp:\n","        print(temp.data,\"->\",end=\" \")\n","        temp=temp.next\n","obj=singlelinkedlist()\n","n=Node(40)\n","obj.head=n\n","n1=Node(30)\n","obj.head.next=n1\n","n2=Node(20)\n","n1.next=n2\n","n3=Node(10)\n","n2.next=n3\n","obj.display()\n","print(\"\\nAfter insertion at position\")\n","obj.insert_position(2,50)\n","obj.display() "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aILaG9IF9qxU","executionInfo":{"status":"ok","timestamp":1677318514110,"user_tz":-330,"elapsed":774,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"d588aade-ebd9-4343-b9ad-6c62042c59f6"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["40 -> 30 -> 20 -> 10 -> \n","After insertion at position\n","40 -> 30 -> 50 -> 20 -> 10 -> "]}]},{"cell_type":"markdown","source":["Create a single linked list with user input"],"metadata":{"id":"E5WP32KwCrrH"}},{"cell_type":"code","source":["class Node:\n","  def __init__(self,data):\n","    self.data=data\n","    self.next=None\n","class singlelinkedlist:\n","  def __init__(self):\n","    self.head=None\n","    self.last_node=None\n","  def append(self,data):\n","    if self.last_node is None:\n","      self.head=Node(data)\n","      self.last_node=self.head\n","    else:\n","      self.last_node.next=Node(data)\n","      self.last_node=self.last_node.next\n","  def display(self):\n","    current=self.head\n","    while current is not None:\n","      print(current.data,end=' ')\n","      current=current.next\n","a_llist=singlelinkedlist()\n","n=int(input(\"how many elements would you like to have?\"))\n","for i in range(n):\n","  data=int(input(\"enter data item: \"))\n","  a_llist.append(data) \n","print(\"the linked list: \",end=' ')\n","a_llist.display()                   "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LBFVjXglCyj5","outputId":"36854082-9fe5-431e-fc39-f273eae21509"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["how many elements would you like to have?4\n","enter data item: 34 \n"]}]}]}