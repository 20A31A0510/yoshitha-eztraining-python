{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNbvpGP8HE2Kxs6b4edPmBD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T-MNFqERF9vx","outputId":"b9f0c3f4-769f-40be-a715-1aecc1443ce0","executionInfo":{"status":"ok","timestamp":1677558995661,"user_tz":-330,"elapsed":42453,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}}},"outputs":[{"name":"stdout","output_type":"stream","text":["select operation 1.PUSH 2.POP 3.QUIT\n","1\n","Enter the element:100\n","[100]\n","select operation 1.PUSH 2.POP 3.QUIT\n","1\n","Enter the element:200\n","[100, 200]\n","select operation 1.PUSH 2.POP 3.QUIT\n","1\n","Enter the element:300\n","[100, 200, 300]\n","select operation 1.PUSH 2.POP 3.QUIT\n","2\n","Removed element: 300\n","[100, 200]\n","select operation 1.PUSH 2.POP 3.QUIT\n","2\n","Removed element: 200\n","[100]\n","select operation 1.PUSH 2.POP 3.QUIT\n","3\n"]}],"source":["#stack implementation using arrays\n","stack=[]\n","def push():\n","  element=int(input(\"Enter the element:\"))\n","  stack.append(element)\n","  print(stack)\n","def pop_element():\n","  if not stack:\n","    print(\"Stack is empty\")\n","  else:\n","    e=stack.pop()\n","    print(\"Removed element:\",e)\n","    print(stack)\n","while True:\n","  print(\"select operation 1.PUSH 2.POP 3.QUIT\")\n","  choice=int(input())\n","  if choice==1:\n","    push()\n","  elif choice==2:\n","    pop_element()\n","  elif choice==3:\n","    break\n","  else:\n","    print(\"Enter correct operation\")  \n"]},{"cell_type":"code","source":["#stack implemntation using linked list\n","class Node:\n","  def __init__(self,data):\n","    self.data=data\n","    self.next=None\n","class stack:\n","  def __init__(self):\n","    self.head=None\n","  def isempty(self):\n","    if self.head==None:\n","      return True\n","    else:\n","      return False\n","  def push(self,data):\n","    if self.head==None:\n","      self.head=Node(data)\n","    else:\n","      newnode=Node(data)\n","      newnode.next=self.head\n","      self.head=newnode\n","  def pop(self):\n","    if self.isempty():\n","      return None\n","    else:\n","      poppednode=self.head\n","      self.head=self.head.next\n","      poppednode.next=None\n","      return poppednode.data\n","  def peak(self):\n","    if self.isempty():\n","      return None\n","    else:\n","      return self.head.data\n","  def display(self):\n","    temp=self.head\n","    if self.isempty():\n","      print(\"Stack is underflow\")\n","    else:\n","      while(temp!=None):\n","        print(temp.data,end=\" \")\n","        temp=temp.next\n","        if(temp!=None):\n","          print(\"-->\",end=\" \")\n","      return    \n","if __name__==\"__main__\":\n","  s=stack()\n","  s.push(1)\n","  s.push(2)\n","  s.push(3)\n","  s.push(4)\n","  s.display()\n","  s.pop()\n","  print()\n","  s.display()\n","  print(s.peak())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rc_Zon-yTwTz","executionInfo":{"status":"ok","timestamp":1677562208005,"user_tz":-330,"elapsed":774,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"afa95e84-80ad-4053-ae15-efdef21622fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["4 --> 3 --> 2 --> 1 \n","3 --> 2 --> 1 3\n"]}]},{"cell_type":"code","source":["#checking balanced paranthesis using stack \n","s=input()\n","st=[]\n","balanced=True\n","for char in s:\n","  if(char=='{' or char=='[' or char=='('):\n","    st.append(char)           \n","  elif(char=='}'):\n","    if(len(st) and st.pop()!='{'):\n","      balanced=False\n","      break\n","  elif(char==']'):\n","    if(len(st) and st.pop()!='['):\n","      balanced=False\n","      break\n","  elif(char==')'):\n","    if(len(st) and st.pop()!='('):\n","      balanced=False\n","      break\n","  else:\n","    balanced=False\n","    break\n","if(balanced==False or len(st)):\n","  print(\"Not balanced\")\n","else:\n","  print(\"Balanced\")                    "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sDxEjrQieopy","executionInfo":{"status":"ok","timestamp":1677564665803,"user_tz":-330,"elapsed":6963,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"5cecddc0-462c-4958-d511-66fccba4306b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[()]]\n","Balanced\n"]}]},{"cell_type":"code","source":["#implementation of queue using array\n","queue=[]\n","def enqueue():\n","  element=input(\"Enter element\")\n","  queue.append(element)\n","  print(element,\"is added to queue\")\n","def dequeue():\n","  if not queue:\n","    print(\"queue is empty\")\n","  else:\n","    e=queue.pop(0)\n","    print(\"Removed element\",e)\n","def display():\n","  print(queue)    \n","while True:\n","  print(\"Select operation 1.ADD 2.REMOVE 3.SHOW 4.QUIT\")\n","  choice=int(input())\n","  if(choice==1):\n","    enqueue()\n","  elif(choice==2):\n","    dequeue()\n","  elif(choice==3):\n","    display()\n","  elif(choice==4):\n","    break  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2prggec7pwgT","executionInfo":{"status":"ok","timestamp":1677565669368,"user_tz":-330,"elapsed":34918,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"bb89df6e-2a63-4bab-b1f4-0b0908608cbc"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["Select operation 1.ADD 2.REMOVE 3.SHOW 4.QUIT\n","1\n","Enter element10\n","10 is added to queue\n","Select operation 1.ADD 2.REMOVE 3.SHOW 4.QUIT\n","1\n","Enter element20\n","20 is added to queue\n","Select operation 1.ADD 2.REMOVE 3.SHOW 4.QUIT\n","1\n","Enter element30\n","30 is added to queue\n","Select operation 1.ADD 2.REMOVE 3.SHOW 4.QUIT\n","2\n","Removed element 10\n","Select operation 1.ADD 2.REMOVE 3.SHOW 4.QUIT\n","3\n","['20', '30']\n","Select operation 1.ADD 2.REMOVE 3.SHOW 4.QUIT\n","4\n"]}]},{"cell_type":"code","source":["#implement stack using queue module\n","from queue import LifoQueue\n","s=LifoQueue(maxsize=3)\n","print(s.qsize())\n","s.put('a')\n","s.put('b')\n","s.put('c')\n","print(s.full())\n","print(s.qsize())\n","print(s.get())\n","print(s.get())\n","print(s.get())\n","print(s.empty())"],"metadata":{"id":"1xBaA28T_tsT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677571265363,"user_tz":-330,"elapsed":609,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"10a2b8bf-4f55-40db-a8c1-adde220d26ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","True\n","3\n","c\n","b\n","a\n","True\n"]}]},{"cell_type":"code","source":["#implement queue using queue module\n","import queue\n","L=queue.Queue(maxsize=3)\n","L.put(10)\n","L.put(20)\n","print(L.get())\n","print(L.get())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b_sboNFQCLGt","executionInfo":{"status":"ok","timestamp":1677571524755,"user_tz":-330,"elapsed":791,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"0e6e55fe-847a-4827-8257-586ee95620a4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","20\n"]}]},{"cell_type":"code","source":["#implementation of queue using linked list\n","class Node:\n","  def __init__(self,data):\n","    self.data=data\n","    self.next=None\n","class Queue:\n","  def __init__(self):\n","    self.head=None\n","    self.last=None\n","  def enqueue(self,data):\n","    if self.last is None:\n","      self.head=Node(data)\n","      self.last=self.head\n","    else:\n","      self.last.next=Node(data)\n","      self.last=self.last.next\n","  def dequeue(self):\n","    if self.head is None:\n","      return None    \n","    else:\n","      to_return=self.head.data\n","      self.head=self.head.next\n","      return to_return\n","a_queue=Queue()\n","while True:\n","  print(\"enqueue <value>\")\n","  print(\"dequeue\")\n","  print(\"quit\") \n","  do=input(\"what would you like to do?\").split()\n","  operation=do[0].strip().lower()\n","  if operation=='enqueue':\n","    a_queue.enqueue(int(do[1]))\n","  elif operation=='dequeue':\n","    dequeued=a_queue.dequeue()\n","    if dequeued is None:\n","      print(\"Queue is empty\")\n","    else:\n","      print(\"dequeued element\",int(dequeued))\n","  elif operation=='quit':\n","    break        "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6grqWQTEDhK0","executionInfo":{"status":"ok","timestamp":1677573903723,"user_tz":-330,"elapsed":42603,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"72284438-ddb5-41e1-aa8d-6c4fd7d46263"},"execution_count":null,"outputs":[{"name":"stdout","output_type":"stream","text":["enqueue <value>\n","dequeue\n","quit\n","what would you like to do?enqueue 300\n","enqueue <value>\n","dequeue\n","quit\n","what would you like to do?enqueue 400\n","enqueue <value>\n","dequeue\n","quit\n","what would you like to do?enqueue 200\n","enqueue <value>\n","dequeue\n","quit\n","what would you like to do?dequeue\n","dequeued element 300\n","enqueue <value>\n","dequeue\n","quit\n","what would you like to do?quit\n"]}]},{"cell_type":"code","source":["#to remove duplicates in linked list\n","class Node:\n","  def __init__(self,data):\n","    self.data=data\n","    self.next=None\n","class LinkedList:\n","  def __init__(self):\n","    self.head=None\n","    self.last_node=None\n","  def append(self,data):\n","    if self.last_node is None:\n","      self.head=Node(data)\n","      self.last_node=self.head\n","    else:\n","      self.last_node.next=Node(data)\n","      self.last_node=self.last_node.next\n","  def get_prev_node(self,ref_node):\n","    temp=self.head\n","    while(temp and temp.next!=ref_node):\n","      temp=temp.next\n","    return temp\n","  def remove(self,node):\n","    prev_node=self.get_prev_node(node)\n","    if prev_node is None:\n","      self.head=self.head.next\n","    else:\n","      prev_node.next=node.next\n","  def display(self):\n","    temp=self.head\n","    while temp:\n","      print(temp.data,end=\" \")\n","      temp=temp.next\n","  def remove_duplicates(llist):\n","    temp1=llist.head\n","    while temp1:\n","      data=temp1.data\n","      temp2=temp1.next\n","      while temp2:\n","        if temp2.data==data:\n","          llist.remove(temp2)\n","        temp2=temp2.next\n","      temp1=temp1.next\n","a_llist=LinkedList()\n","data_list=input(\"please enter the elements in the list\")\n","for data in data_list:\n","  a_llist.append(int(data))\n","remove_duplicates(a_llist)  \n","print(\"The list with duplicates removed\")\n","a_llist.display()            "],"metadata":{"id":"1_U0yNwTMpWx","colab":{"base_uri":"https://localhost:8080/","height":252},"executionInfo":{"status":"error","timestamp":1677579327944,"user_tz":-330,"elapsed":7155,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"4426636f-778b-4e6e-c4b6-e9c2be573237"},"execution_count":7,"outputs":[{"name":"stdout","output_type":"stream","text":["please enter the elements in the list2\n"]},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-0d413c78c4bf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     45\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m   \u001b[0ma_llist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m \u001b[0mremove_duplicates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma_llist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     48\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"The list with duplicates removed\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0ma_llist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'remove_duplicates' is not defined"]}]}]}