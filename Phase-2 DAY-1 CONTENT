{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Lambda Function"],"metadata":{"id":"-eAVnMptj0Lz"}},{"cell_type":"markdown","source":["It is called as anonymous function when we want to use function concept alone without function name there we apply concept of Lambda function."],"metadata":{"id":"4iwAe1bXm25V"}},{"cell_type":"markdown","source":["Four pillars of OOPS:\n","\n","1. Abstraction- \n","      Hiding the implementation part showing what is required for the users is called abstraction. Eg: exe.file We can make class or method as abstract, opposite to abstract is concrete.\n","2. Encapsulation- There are 3 types\n","                  1. public- one class info can be accessed by any other class\n","                  2. private- can be used where it is declared/not in inherited class\n","                  3. protected- can be accessed only where it got  declared or which ever class inherited from this class there also we can use\n","                  4. _ _(double underscore)- private\n","                  5. _(single underscore)- protected\n","3. Inheritance- There are 2 classes\n","                1. Base class- parent class\n","                2. Derived Class- child class\n","                   It will inherit properities of base class\n","                Types of inheritance:\n","                1. Single Inheritance\n","                2. Multiple Inheritance\n","                3. Multilevel Inheritance\n","                4. Hierarchial Inheritance\n","                5. Hybrid Inheritance \n","4. Polymorphism"],"metadata":{"id":"SfqUrM1fnUUE"}},{"cell_type":"code","source":["#abstraction\n","from abc import ABC,abstractmethod\n","class abstractdemo(ABC):\n","  @abstractmethod   #decorator\n","  def display(self):\n","    None\n","  @abstractmethod\n","  def show(self):\n","    None\n","#changing abstract to concrete\n","class demo(abstractdemo):\n","  def display(self):\n","    print(\"Abstraction method\")\n","  def show(self):\n","    print(\"2nd function\")\n","obj=demo() \n","obj.display()\n","obj.show()            "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AMm_d_Ui5yEV","executionInfo":{"status":"ok","timestamp":1677216738333,"user_tz":-330,"elapsed":10,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"b618f56f-4ba3-471c-a3e4-e37d2c644334"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Abstraction method\n","2nd function\n"]}]},{"cell_type":"code","source":["#single inheritance\n","class parent:      #base class\n","  def display(self):\n","    print(\"parent class\")\n","class child(parent):      #child inherits parent\n","  def show(self):\n","    print(\"child class\") \n","c=child()               #c is object for child class\n","c.display()\n","c.show()       "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XsEotbu5C0-I","executionInfo":{"status":"ok","timestamp":1677219137530,"user_tz":-330,"elapsed":629,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"8009cfc5-5e89-4e73-b6c9-a501f1c37815"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["parent class\n","child class\n"]}]},{"cell_type":"code","source":["#program for single inheritance\n","class A:\n","  n=30\n","class B(A):\n","  def calc(self):\n","    c=self.n+70\n","    print(c)\n","obj=B()\n","obj.calc()     "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2LNmkh0hE1NW","executionInfo":{"status":"ok","timestamp":1677219848838,"user_tz":-330,"elapsed":519,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"8d4c7a83-d055-4741-e38b-625957cdee27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["100\n"]}]},{"cell_type":"code","source":["#multiple inheritance\n","class mom:\n","  def mdisplay(self):\n","    print(\"mom class\")\n","class dad:\n","  def ddisplay(self):\n","    print(\"dad class\")\n","class child(mom,dad):\n","  def cdisplay(self):\n","    print(\"child class\")\n","c1=child()\n","c1.mdisplay()\n","c1.ddisplay()\n","c1.cdisplay()         "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e9ecp6IebA-U","executionInfo":{"status":"ok","timestamp":1677225799375,"user_tz":-330,"elapsed":894,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"23bcc39c-11ab-4816-b603-1f14d0c43d75"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["mom class\n","dad class\n","child class\n"]}]},{"cell_type":"code","source":["#multilevel inheritance\n","class grandparent:\n","  def display(self):\n","    print(\"grandparent class\")\n","class parent(grandparent):\n","  def show(self):\n","    print(\"parent class\")\n","class child(parent):\n","  def cdisplay(self):\n","    print(\"child class\")\n","c1=child()\n","c1.display()\n","c1.show()\n","c1.cdisplay()            "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a65Li620ctGa","executionInfo":{"status":"ok","timestamp":1677226490855,"user_tz":-330,"elapsed":756,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"10517833-126f-495c-debc-0524b6db282f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["grandparent class\n","parent class\n","child class\n"]}]},{"cell_type":"code","source":["#hierarchial inheritance\n","class parent:\n","  def display(self):\n","    print(\"class parent\")\n","class child1(parent):\n","  def c1show(self):\n","    print(\"child1 class\")\n","class child2(parent):\n","  def c2show(self):\n","    print(\"child2 class\")\n","c1=child1()\n","c1.c1show()\n","c1.display()\n","c2=child2()\n","c2.c2show()\n","c2.display()              "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-XkhsomQfdlJ","executionInfo":{"status":"ok","timestamp":1677228644287,"user_tz":-330,"elapsed":3570,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"407dabea-8a23-4a13-8c27-e41a156ab102"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["child1 class\n","class parent\n","child2 class\n","class parent\n"]}]},{"cell_type":"code","source":["#hybrid inheritance\n","class parent:\n","  def display(self):\n","    print(\"parent class\")\n","class child1(parent):\n","  def c1show(self):\n","    print(\"child1 class\")\n","class child2(parent):\n","  def c2show(self):\n","    print(\"child2 class\")\n","class kid1(child1):\n","  def k1display(self):\n","    print(\"kid1 class\")\n","class kid2(child1):\n","  def k2display(self):\n","    print(\"kid2 class\")\n","class kidd1(child2):\n","  def k1show(self):\n","    print(\"kidd1 class\")\n","class kidd2(child2):\n","  def k2show(self):\n","    print(\"kidd2 class\")\n","c1=kid1()\n","c1.c1show()\n","c1.display()\n","c1.k1display()\n","c2=kid2()\n","c2.c1show()\n","c2.display()\n","c2.k2display()\n","c3=kidd1()\n","c3.c2show()\n","c3.k1show()\n","c3.display()\n","c4=kidd2()\n","c4.c2show()\n","c4.display()\n","c4.k2show()  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tdzlonV8h8s5","executionInfo":{"status":"ok","timestamp":1677228263666,"user_tz":-330,"elapsed":649,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"8b825fb0-5340-41f7-b30f-6a2be6cd936d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["child1 class\n","parent class\n","kid1 class\n","child1 class\n","parent class\n","kid2 class\n","child2 class\n","kidd1 class\n","parent class\n","child2 class\n","parent class\n","kidd2 class\n"]}]}]}