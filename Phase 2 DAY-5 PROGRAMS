{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMn5wUzBvrgKZZYONTJMsgK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["BINARY TREE"],"metadata":{"id":"ETfgUWzFl1Zd"}},{"cell_type":"markdown","source":["Binary tree can have maximum 2 children.\n","\n"],"metadata":{"id":"clOtb8jDl2br"}},{"cell_type":"code","source":["#implementation of binary tree\n","class binarytreenode:\n","  def __init__(self,data):\n","    self.data=data\n","    self.leftchild=None\n","    self.rightchild=None\n","node1=binarytreenode(60)\n","node2=binarytreenode(46)\n","node3=binarytreenode(41)\n","node4=binarytreenode(36)\n","node5=binarytreenode(30)\n","node6=binarytreenode(20)\n","node7=binarytreenode(10)\n","\n","node1.leftchild=node2\n","node1.rightchild=node3\n","node2.leftchild=node4\n","node2.rightchild=node5\n","node3.leftchild=node6\n","node3.rightchild=node7\n","print(\"root node is:\",node1.data)\n","print(\"left child of node is:\",node1.leftchild.data)\n","print(\"right child of node is:\",node1.rightchild.data)\n","print(\"node is:\",node2.data)\n","print(\"left child of node2 is:\",node2.leftchild.data)\n","print(\"right child of node2 is:\",node2.rightchild.data)\n","print(\"node is:\",node3.data)\n","print(\"left child of node3 is:\",node3.leftchild.data)\n","print(\"right child of node3 is:\",node3.rightchild.data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1nfqQRTGl9vC","executionInfo":{"status":"ok","timestamp":1677649159415,"user_tz":-330,"elapsed":1271,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"f0438668-7fcf-47e5-b46f-a10a3165a4bf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["root node is: 60\n","left child of node is: 46\n","right child of node is: 41\n","node is: 46\n","left child of node2 is: 36\n","right child of node2 is: 30\n","node is: 41\n","left child of node3 is: 20\n","right child of node3 is: 10\n"]}]},{"cell_type":"markdown","source":["Binary tree traversal:\n","1. inorder - left-root-right - LDR\n","2. preorder - root-left-right - DLR\n","3. postorder - left-right-root - LRD\n","There are 2 types of traversal:\n","1.BFS - Breadth First Search\n","2.DFS - Depth First Search\n","                    1. LDR\n","                    2. DLR\n","                    3. LRD"],"metadata":{"id":"Fx9we8dcsnKf"}},{"cell_type":"code","source":["#implementing inorder,preorder,postorder traversals\n","class Node:\n","  def __init__(self,key):\n","    self.left=None\n","    self.right=None\n","    self.val=key\n","def printinorder(root):\n","  if root:\n","    printinorder(root.left)   #recursive\n","    print(root.val,end=\" \")\n","    printinorder(root.right)\n","def printpostorder(root):\n","  if root:\n","    printpostorder(root.left)\n","    printpostorder(root.right)\n","    print(root.val,end=\" \")\n","def printpreorder(root):\n","  if root:\n","    print(root.val,end=\" \")\n","    printpreorder(root.left)\n","    printpreorder(root.right)\n","root=Node(1)\n","root.left=Node(2)\n","root.right=Node(3)\n","root.left.left=Node(4)\n","root.left.right=Node(5)\n","print(\"Inorder:\")\n","printinorder(root)\n","print( )\n","print(\"Postorder:\")\n","printpostorder(root) \n","print( )\n","print(\"Preorder:\")\n","printpreorder(root)            "],"metadata":{"id":"mC6_5up3trLK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677658183358,"user_tz":-330,"elapsed":1080,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"eaefaaa3-9eb8-4482-c354-cb9704fb9deb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Inorder:\n","4 2 5 1 3 \n","Postorder:\n","4 5 2 3 1 \n","Preorder:\n","1 2 4 5 3 "]}]},{"cell_type":"markdown","source":["Types of binary Tree:\n","1. full binary tree: all the nodes will have 0 or 2 children\n","2. degenerated/pathalogical binary tree: every node will have 0 or 1 child\n","3. skewed binary tree: it is left-skewed or right-skewed\n","4. complete binary tree: \n","       1. every level should be full or complte\n","       2. in last level it is incomplete nodes should present at extreme left\n","5. perfect binary tree:\n","       1. all internal nodes those which has 2 children and leaf nodes both should be on same level.\n","6. balanced binary tree: \n","      1. for all the nodes height of left subtree - height of right subtree can be 0 or 1\n","             \n","\n"],"metadata":{"id":"Wi9sPqLYPF02"}},{"cell_type":"markdown","source":["BINARY SEARCH TREE"],"metadata":{"id":"jFJ2cOyZV901"}},{"cell_type":"markdown","source":["1. All the left side elements should be lesser than its parent \n","2. All the right side elements should be greater than its parent "],"metadata":{"id":"W677HNw-WB7T"}},{"cell_type":"code","source":["#implementation of BST\n","class Node:\n","  def __init__(self,key):\n","    self.left=None\n","    self.right=None\n","    self.val=key\n","def insert(root,key):\n","  if root is None:\n","    return Node(key)\n","  else:\n","    if root.val==key:\n","      return root\n","    elif root.val<key:\n","      root.right=insert(root.right,key)\n","    else:\n","      root.left=insert(root.left,key)\n","  return root\n","def inorder(root):\n","  if root:\n","    inorder(root.left)\n","    print(root.val)\n","    inorder(root.right)\n","r=Node(50)\n","r=insert(r,30)\n","r=insert(r,20)\n","r=insert(r,40)\n","r=insert(r,70)\n","r=insert(r,60)\n","r=insert(r,80)\n","inorder(r)                  "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ez5W2c8VhmuQ","executionInfo":{"status":"ok","timestamp":1677663968545,"user_tz":-330,"elapsed":825,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"d7bd3a2b-a3d0-4853-a164-11ae5de6efa0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["20\n","30\n","40\n","50\n","60\n","70\n","80\n"]}]},{"cell_type":"code","source":["#deleting node in binary search tree\n","class Node:\n","  def __init__(self,key):\n","    self.left=None\n","    self.right=None\n","    self.val=key\n","def insert(root,key):\n","  if root is None:\n","    return Node(key)\n","  else:\n","    if root.val==key:\n","      return root\n","    elif root.val<key:\n","      root.right=insert(root.right,key)\n","    else:\n","      root.left=insert(root.left,key)\n","  return root\n","def inorder(root):\n","  if root:\n","    inorder(root.left)\n","    print(root.val)\n","    inorder(root.right)  \n","def minvalueNode(node):\n","  temp=node\n","  while(temp.left is not None):\n","    temp=temp.left\n","  return temp\n","def deletenode(root,key):\n","  if root is None:\n","    return root\n","  if key<root.val:\n","    root.left=deletenode(root.left,key)\n","  elif(key>root.val):\n","    root.right=deletenode(root.right,key)\n","  else:\n","    if root.left is None:\n","      temp=root.right\n","      root=None\n","      return temp\n","    elif root.right is None:\n","     temp=root.left\n","     root=None\n","     return temp\n","    temp=minvalueNode(root.right)\n","    root.val=temp.val\n","    root.right=deletenode(root.right,temp.val)\n","  return root            \n","root=None\n","root=insert(root,50) \n","root=insert(root,30)\n","root=insert(root,20)\n","root=insert(root,40)\n","root=insert(root,70)\n","root=insert(root,60)\n","root=insert(root,80)\n","print(\"Inorder traversal of the given tree\")\n","inorder(root) \n","print(\"delete 20\")\n","root=deletenode(root,20)\n","print(\"Inorder traversal of modified tree is\")\n","inorder(root)\n","print(\"delete 70\")\n","root=deletenode(root,70)\n","print(\"Inorder traversal of modified tree is\")\n","inorder(root)"],"metadata":{"id":"UXlPTvcxk2MZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1677730979905,"user_tz":-330,"elapsed":817,"user":{"displayName":"yoshitha madapati","userId":"07866955266391500601"}},"outputId":"0ca7098b-1c62-4df4-f68e-1aa19eb1ef0f"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Inorder traversal of the given tree\n","20\n","30\n","40\n","50\n","60\n","70\n","80\n","delete 20\n","Inorder traversal of modified tree is\n","30\n","40\n","50\n","60\n","70\n","80\n","delete 70\n","Inorder traversal of modified tree is\n","30\n","40\n","50\n","60\n","80\n"]}]}]}